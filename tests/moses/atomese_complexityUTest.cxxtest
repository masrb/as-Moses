#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/execution/Instantiator.h>
#include <opencog/util/Logger.h>
#include <moses/moses/moses/complexity.h>
#include <moses/moses/moses/types.h>

using namespace opencog;
using namespace std;
using namespace moses;

class atomese_complexityUTest : public CxxTest::TestSuite {
private:
	AtomSpace *as;
	SchemeEval *eval;


public:
	atomese_complexityUTest();

	~atomese_complexityUTest();

    void test_atomese_complexity_NN();
    void test_atomese_complexity_TL();
    void test_atomese_complexity_TLNN();
    void test_atomese_complexity_MNN();
    void test_atomese_complexity_PN();
};


atomese_complexityUTest::atomese_complexityUTest()
{
	logger().set_level(Logger::DEBUG);
	logger().set_print_to_stdout_flag(true);

	as = new AtomSpace();
	eval = new SchemeEval(as);
	//eval->eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "\")");
	eval->eval("(use-modules (opencog exec))");

}

atomese_complexityUTest::~atomese_complexityUTest()
{
	delete eval;
	delete as;
	// Erase the log file if no assertions failed.
	if (!CxxTest::TestTracker::tracker().suiteFailed())
		std::remove(logger().get_filename().c_str());
}

//test atomese complexity for  NumberNode
void atomese_complexityUTest::test_atomese_complexity_NN()
{
     const Handle &handle = eval->eval_h(
      	"(ExecutionOutputLink"
           "(DefinedSchemaNode \"x+y*10\")"
          " (ListLink"
             " (NumberNode 2)"
               " (NumberNode 4)))"
    );

    std::cout << "handle " << handle->to_string() << std::endl;
	complexity_t as ;
	as= atomese_complexity(handle);
	std::cout << "result = " << as << std::endl;
    complexity_t expected= 2;

	TS_ASSERT_EQUALS(as,expected);
}


//test atomese complexity for  TimesLink
void atomese_complexityUTest::test_atomese_complexity_TL()
{
     const Handle &handle = eval->eval_h(
      	  //" (cog-execute!"
             "(TimesLink"
                "    (NumberNode 2)"
                    "(NumberNode 3))"
     );

    std::cout << "handle " << handle->to_string() << std::endl;
	complexity_t as ;
	as= atomese_complexity(handle);
	std::cout << "result = " << as << std::endl;
    complexity_t expected=2;

	TS_ASSERT_EQUALS(as,expected);
}

//test atomese complexity for number node 0 and TimesLink
void atomese_complexityUTest::test_atomese_complexity_TLNN()
{
     const Handle &handle = eval->eval_h(

             "(TimesLink"
                "    (NumberNode 2)"
                    "(NumberNode 0))"
     );

    std::cout << "handle " << handle->to_string() << std::endl;
	complexity_t as ;
	as= atomese_complexity(handle);
	std::cout << "result = " << as << std::endl;
    complexity_t expected=0;

	TS_ASSERT_EQUALS(as,expected);
}


//test atomese complexity for multiple NumberNodes
void atomese_complexityUTest::test_atomese_complexity_MNN()
{
     const Handle &handle = eval->eval_h(

      	       "(GreaterThanLink"
                    "(PlusLink"
                     "  (NumberNode 2)"
                       "(NumberNode 2))"
                    "(TimesLink"
                       "(NumberNode 3)"
                       "(NumberNode 0.5)))"
     );

    std::cout << "handle " << handle->to_string() << std::endl;
	complexity_t as ;
	as = atomese_complexity(handle);
	std::cout << "result = " << as << std::endl;
    complexity_t expected= 4;

	TS_ASSERT_EQUALS(as,expected);
}

//test atomese complexity for PredicateNode
void atomese_complexityUTest::test_atomese_complexity_PN()
{
     const Handle &handle = eval->eval_h(
      	      " (EvaluationLink"
                  "(PredicateNode \"breathe \")"
                   "( ListLink"
                     "( ConceptNode \" birds \")"
                      "(ConceptNode \" air \")))"
     );

    std::cout << "handle " << handle->to_string() << std::endl;
	complexity_t as ;
	as= atomese_complexity(handle);
	std::cout << "result = " << as << std::endl;
    complexity_t expected= 1;

	TS_ASSERT_EQUALS(as,expected);
}
